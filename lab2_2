#include <iostream>
#include <vector>
#include <chrono>
#include <climits>
#include <cstdlib>
#include <ctime>
#include <mutex>
#include <thread>
#include <windows.h>

using namespace std;

mutex mtx;

void process_array(const vector<int>& arr, int start, int end, int& sum, int& min)
{
    for (int i = start; i < end; ++i)
    {
        if (arr[i] % 2 != 0)
        {
            lock_guard<mutex> lock(mtx);  // Захоплюємо м'ютекс для синхронізації
            sum += arr[i];
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
    }
}

int main() {
    SetConsoleOutputCP(1251);
    srand(time(0));
    int n;
    cout << "Введіть розмір масиву: ";
    cin >> n;

    vector<int> arr(n);
    for (int i = 0; i < n; ++i)
    {
        arr[i] = rand() % 100;
    }

    int sum = 0;
    int min = INT_MAX;

    auto start_time = chrono::high_resolution_clock::now();

    int num_threads = 16;
    vector<thread> threads;
    int numbers_size = n / num_threads;

    for (int i = 0; i < num_threads; ++i)
    {
        int start = i * numbers_size;
        int end;
        if (i == num_threads - 1)
        {
            end = n;
        }
        else
        {
            end = (i + 1) * numbers_size;
        }
        threads.push_back(thread(process_array, ref(arr), start, end, ref(sum), ref(min)));
    }

    for (auto& t : threads)
    {
        t.join();
    }

    auto end_time = chrono::high_resolution_clock::now();
    auto elapsed = chrono::duration_cast<chrono::milliseconds>(end_time - start_time);
    cout << "Кількість потоків: " << num_threads << endl;
    cout << "Час виконання: " << elapsed.count() << " мілісекунд." << endl;


    return 0;
}
